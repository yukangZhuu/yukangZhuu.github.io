<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++中的拷贝构造函数与深/浅拷贝</title>
    <url>/2022/02/27/copyFunc_220227/</url>
    <content><![CDATA[<p>在一个C++空类中，编译器会加入以下默认的成员函数：</p>
<ul>
<li>默认构造函数和拷贝构造函数</li>
<li>析构函数</li>
<li>默认的赋值函数（赋值运算符）</li>
<li>取值函数 </li>
</ul>
<h2 id="拷贝构造函数与赋值函数"><a href="#拷贝构造函数与赋值函数" class="headerlink" title="拷贝构造函数与赋值函数"></a>拷贝构造函数与赋值函数</h2><p><strong>构造函数</strong>可以被重载，可以有多个，<strong>也可以带参数</strong>。而默认构造函数没有参数，它什么也不做。</p>
<h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a><strong>拷贝构造函数</strong></h3><p><strong>拷贝构造函数</strong>（或复制构造函数）是一种特殊的构造函数，用基于同一类的一个对象构造和初始化另一个对象。当没有重载拷贝构造函数时，就会调用默认拷贝构造函数。  </p>
<p>注意，以上两种函数的不同点在于，默认的构造函数啥也不做，而默认的拷贝构造函数使用“老对象”的数据成员的值对“新对象”的数据成员一一进行赋值。</p>
<p>例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m_i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">int</span> i):<span class="built_in">m_i</span>(i) &#123;&#125; <span class="comment">//构造函数的重载实现,初始化列表</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">A a;        <span class="comment">//调用默认构造函数</span></span><br><span class="line"><span class="function">A <span class="title">a</span><span class="params">(<span class="number">1</span>)</span></span>;     <span class="comment">//调用重载的构造函数</span></span><br><span class="line"><span class="function">A <span class="title">b</span><span class="params">(a)</span></span>;     <span class="comment">//调用默认拷贝构造函数</span></span><br><span class="line">A b = a;    <span class="comment">//与b(a)等价</span></span><br></pre></td></tr></table></figure>
<p>构造函数与拷贝构造函数的重载形式如下例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m=name;</span><br><span class="line">    <span class="keyword">int</span> m_age;</span><br><span class="line">    <span class="keyword">float</span> m_score;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">float</span> score);  <span class="comment">//重载构造函数</span></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">const</span> Student &amp; student);           <span class="comment">//重载拷贝构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">float</span> score): <span class="built_in">m_name</span>(name), <span class="built_in">m_age</span>(age), <span class="built_in">m_score</span>(score)&#123;&#125;                     <span class="comment">//使用初始化列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="keyword">const</span> Student &amp;student)</span><br><span class="line">&#123;</span><br><span class="line">    m_age = student.m_age;</span><br><span class="line">    m_score = student.m_score;</span><br><span class="line"></span><br><span class="line">    m_name = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(student.m_name) + <span class="number">1</span>];  <span class="comment">//开空间</span></span><br><span class="line">    <span class="built_in">strcpy</span>(m_name, student.m_name);                 <span class="comment">//拷数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ps.为什么这里的拷贝构造函数不能使用初始化列表呢？（例如m_name(student.m_name)）这就涉及到深拷贝和浅拷贝的问题了，详见后文的解析。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="赋值函数"><a href="#赋值函数" class="headerlink" title="赋值函数"></a><strong>赋值函数</strong></h3><p>另外，需要注意拷贝构造函数与重载<strong>赋值函数</strong>（赋值运算符）的区别:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A a;            <span class="comment">//默认构造函数</span></span><br><span class="line"><span class="function">A <span class="title">b</span><span class="params">(a)</span></span>;         <span class="comment">//拷贝构造函数</span></span><br><span class="line">A c = a;        <span class="comment">//拷贝构造函数</span></span><br><span class="line">A d;</span><br><span class="line">d = a;          <span class="comment">//赋值函数,因为d已经存在。</span></span><br></pre></td></tr></table></figure>
<p>如果没有重载赋值函数，则会调用默认赋值函数来进行赋值，默认的赋值函数与默认的拷贝构造函数一样，使用“=”后边的数据成员的值对被赋值的数据成员一一进行赋值。  </p>
<p>赋值运算的重载声明如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> A&amp; other);</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现例</span></span><br><span class="line">Student::Student&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Student&amp; s)  <span class="comment">//必须要返回引用，为了连续的赋值</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    m_age = student.m_age;</span><br><span class="line">    m_source = student.m_source;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;s)          <span class="comment">// 防止出现  student = student 的情况误释放空间</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] m_name;</span><br><span class="line">        m_name = <span class="literal">NULL</span>;</span><br><span class="line">        m_name = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(s.m_name) + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(m_name, s.m_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="深拷贝与浅拷贝"><a href="#深拷贝与浅拷贝" class="headerlink" title="深拷贝与浅拷贝"></a>深拷贝与浅拷贝</h2><p>经过上面的讨论，我们知道，默认的拷贝重载函数和赋值函数会对对象的数据成员<strong>一一赋值</strong>，这实际上就是<strong>浅拷贝</strong>。</p>
<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a><strong>浅拷贝</strong></h3><p>浅拷贝指的是在对象复制时，只对对象中的数据成员进行简单的赋值。很多时候，浅拷贝已经能够完成我们的任务。但是，当类存在动态成员时，浅拷贝就会出现问题。例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>()&#123; p = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">100</span>); &#125;</span><br><span class="line">    ~<span class="built_in">B</span>()</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">if</span>(p != <span class="literal">NULL</span>) <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B a;</span><br><span class="line">    <span class="function">B <span class="title">b</span><span class="params">(a)</span></span>;   <span class="comment">//默认拷贝构造函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在这个例子中，类中存在指针类型的变量，而这时默认拷贝函数的简单赋值会导致a和b两个对象的数据成员（指针）指向了同一地址。所以在程序结束时，会导致指针指向的空间释放两次，从而使程序崩溃。  </p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a><strong>深拷贝</strong></h3><p>在“深拷贝”的情况下，对于对象中动态成员，就不能仅仅简单地赋值了，而应该重新动态分配空间。指针类型的深拷贝会让两个指针各自指向一段内存空间，但它们指向的空间具有相同的内容，从而在释放指针时各不影响。具体实例可以参考上节中拷贝构造函数和赋值函数重载的实现。  </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>浅拷贝会把指针变量的地址复制; 深拷贝会重新开辟内存空间。</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>POSIX标准与其部分C API (一)</title>
    <url>/2022/02/24/posix_220224/</url>
    <content><![CDATA[<p>最近在实习过程中，需要查阅部门以前写的Android HAL代码，粗略地看了一下，发现自己竟然对其中用到的很多库完全不熟悉，看来自己的C水平确实也就这样了。  </p>
<p>好在贴心的mentor提醒说里面很多库来自POSIX，并叫我趁着这个机会去学一学，对以后的工作会大有好处。</p>
<h2 id="什么是POSIX"><a href="#什么是POSIX" class="headerlink" title="什么是POSIX"></a>什么是POSIX</h2><p>POSIX(Portable Operating System Interface for Computing Systems)是由IEEE 和ISO/IEC 开发的一簇标准。POSIX 标准定义了操作系统应该为应用程序提供的接口标准，是 IEEE 为要在各种 UNIX 操作系统上运行的软件而定义的一系列 API 标准的总称。  </p>
<p>POSIX库 就是C POSIX library。C POSIX library是C语言的POSIX系统下的标准库。包含了一些在C语言标准库之外的函数。为了OS之间的可移植性，POSIX标准规定了一些标准的接口。而这些接口标准的集合就是POSIX库。</p>
<p><a class="link"   href="https://pubs.opengroup.org/onlinepubs/9699919799/nframe.html" >官方文档<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="POSIX、libc与glibc"><a href="#POSIX、libc与glibc" class="headerlink" title="POSIX、libc与glibc"></a>POSIX、libc与glibc</h2><ul>
<li><p>C 标准函数库（C standard library，缩写：libc），C标准函数库共有29个头文件。总而言之，几乎在任何平台上的 C 语言 (包括非 UNIX 平台) 都支持此标准。</p>
</li>
<li><p>GNU C库（英语：GNU C Library，常简称为glibc）是一种按照LGPL许可协议发布的，自由的，公开源代码的函数库。<strong>既包含C标准库，也包含POSIX库</strong>。</p>
</li>
</ul>
<h2 id="一些常见的POSIX-C库（一）"><a href="#一些常见的POSIX-C库（一）" class="headerlink" title="一些常见的POSIX C库（一）"></a>一些常见的POSIX C库（一）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;pthread.h&gt;  </span><br><span class="line">&lt;poll.h&gt;  </span><br><span class="line">&lt;fcntl.h&gt;</span><br><span class="line">&lt;sys/time.h&gt;  </span><br><span class="line">&lt;unistd.h&gt;  </span><br><span class="line">&lt;sys/eventfd.h&gt;  </span><br><span class="line">&lt;linux/input.h&gt;  </span><br><span class="line">&lt;dirent.h&gt;  </span><br><span class="line">&lt;errno.h&gt;  </span><br></pre></td></tr></table></figure>

<h3 id="pthread-h"><a href="#pthread-h" class="headerlink" title="pthread.h"></a><strong>pthread.h</strong></h3><p>pthread(POSIX thread)，简称为pthread，是线程的POSIX标准，在类Unix操作系统中(Unix、Linux、Mac OS X等)，都是用pthread作为操作系统的线程。</p>
<ul>
<li><p><strong>互斥锁</strong></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ptread_mutex_t</span></span><br></pre></td></tr></table></figure>

<p>  posix下抽象了一个锁类型的结构：ptread_mutex_t。通过对该结构的操作，来判断资源是否可以访问。顾名思义，加锁(lock)后，别人就无法打开，只有当锁没有关闭(unlock)的时候才能访问资源。即对象互斥锁的概念，来保证共享数据操作的完整性。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_init</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="keyword">const</span> <span class="keyword">pthread_mutexattr_t</span> *<span class="keyword">restrict</span> attr)</span></span>; <span class="comment">//互斥锁的初始化</span></span><br></pre></td></tr></table></figure>
<p>  该函数第一个参数为锁对象，第二个为锁的属性，一般为NULL。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span> <span class="comment">//加锁</span></span></span><br></pre></td></tr></table></figure>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span> <span class="comment">//解锁</span></span></span><br></pre></td></tr></table></figure>
<p>  不论哪种类型的锁，都不可能被两个不同的线程同时得到，而必须等待解锁。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>   <span class="title">pthread_mutex_destroy</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *mutex)</span></span>;  <span class="comment">//析构锁</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>线程的创建</strong></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>   <span class="title">pthread_create</span><span class="params">(<span class="keyword">pthread_t</span> *, <span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *, <span class="keyword">void</span> *(*)(<span class="keyword">void</span> *), <span class="keyword">void</span> *)</span></span>;  <span class="comment">//创建线程函数</span></span><br></pre></td></tr></table></figure>
<p>  函数共有四个参数，第一个为指向线程标识符的指针，第二个参数用来设置线程属性，第三个参数是线程运行函数的起始地址，第四个参数是运行函数的参数。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>   <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span>, <span class="keyword">void</span> **)</span></span>;  </span><br></pre></td></tr></table></figure>
<p>  pthread_join函数会让主线程阻塞，直到所有线程都已经退出，即使主线程等待子线程结束。<br>  一个创建线程的例子如下：</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pthread_create(&amp;tid, <span class="literal">NULL</span>, class_test, ptr);</span><br><span class="line">pthread_join(tid, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<p>  其他函数：</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pthread_detach;</span><br><span class="line">pthread_self;</span><br><span class="line">pthread_once;</span><br><span class="line">pthread_cancel;</span><br><span class="line">pthread_kill;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="poll-h"><a href="#poll-h" class="headerlink" title="poll.h"></a><strong>poll.h</strong></h3><p>poll用来在指定时间内论询一定数量的文件描述符，来测试其中是否有就绪的。  </p>
<ul>
<li><strong>struct pollfd</strong>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>   fd;         <span class="comment">/* file descriptor */</span></span><br><span class="line">    <span class="keyword">short</span> events;     <span class="comment">/* requested events */</span></span><br><span class="line">    <span class="keyword">short</span> revents;    <span class="comment">/* returned events */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
  fd 为文件描述符，events 告诉poll 监听fd 上哪些事件，它是一系列事件按位或。revents 由内核修改，来通知应用程序fd上实际上发生了哪些事件。event和reevent，有一系列事件标识符值，常用的如POLLIN，表示普通或优先级带数据可读。</li>
<li><strong>poll函数</strong>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd fds[], <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span>；</span></span><br></pre></td></tr></table></figure>
  nfds 为监听事件集合fds的大小。timeout 为poll的超时时间，单位毫秒。timeout 为-1时，poll永远阻塞，直到有事件发生。timeout为0时，poll立即返回。</li>
</ul>
<h3 id="fcntl-h"><a href="#fcntl-h" class="headerlink" title="fcntl.h"></a><strong>fcntl.h</strong></h3><ul>
<li><p><strong>打开&amp;关闭文件</strong></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * pathname, <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>
<p>  第一个参数为文件路径，第二个参数定义打开文件的权限，如O_RDONLY以只读方式打开文件，O_WRONLY以只写方式打开文件，O_RDWR以读写方式打开文件。<br>  成功则返回文件描述符，否则返回-1。</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">close</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>读写文件</strong></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">void</span> * buf ,<span class="keyword">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure>
<p>  read()函数把参数fd 所指的文件传送count个字节到buf指针所指的内存中,如果顺利read()会返回实际读到的字节数.</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write</span> <span class="params">(<span class="keyword">int</span> fd,<span class="keyword">const</span> <span class="keyword">void</span> * buf,<span class="keyword">size_t</span> count)</span></span>;</span><br></pre></td></tr></table></figure>
<p>  write()会把参数buf所指的内存写入count个字节到参数fd所指的文件内,文件读写位置会随写入的字节数移动。</p>
</li>
<li><p><strong>其他函数</strong></p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lseek  <span class="comment">//移动文件的读写位置</span></span><br><span class="line">fcntl  <span class="comment">//文件描述词操作</span></span><br><span class="line">creat  <span class="comment">//建立文件</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="sys-time-h"><a href="#sys-time-h" class="headerlink" title="sys/time.h"></a><strong>sys/time.h</strong></h3><h3 id="sys-timefd-h"><a href="#sys-timefd-h" class="headerlink" title="sys/timefd.h"></a><strong>sys/timefd.h</strong></h3><h3 id="sys-eventfd-h"><a href="#sys-eventfd-h" class="headerlink" title="sys/eventfd.h"></a><strong>sys/eventfd.h</strong></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//分叉函数</span></span><br></pre></td></tr></table></figure>


<h3 id="unistd-h"><a href="#unistd-h" class="headerlink" title="unistd.h"></a><strong>unistd.h</strong></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">pid_t</span> <span class="title">fork</span><span class="params">(<span class="keyword">void</span>)</span></span>;   <span class="comment">//分叉函数</span></span><br></pre></td></tr></table></figure>
<p>fork用于创建一个新进程，称为子进程，它与父进程（即系统调用fork的进程）同时运行。创建新的子进程后，两个进程将执行fork()系统调用之后的下一条指令。    </p>
<p>很重要的一点是，fork仅仅被调用一次，却能够返回两次。在子进程与父进程中，返回值是不同的，子进程中fork返回0，而在父进程中，fork返回新创建的子进程的进程ID。  </p>
<p>创建子进程的常用结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ret = fork();  </span><br><span class="line"><span class="keyword">if</span>(ret == <span class="number">0</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">//子进程</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">//父进程</span></span><br><span class="line">&#125;  </span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="keyword">int</span> pipe(<span class="keyword">int</span> fd[<span class="number">2</span>]);   <span class="comment">//管道函数</span></span><br></pre></td></tr></table></figure>
<p>在unix系统中，进程间的通信需要内核缓冲区的参与，即写端进程把数据写入缓冲区，然后由读端进程读出数据。内核提供的这种机制称为进程间通信（IPC，InterProcess Communication）</p>
<p>管道就是一种简单的常用IPC方法。向管道读写数据通过两个文件描述符，一个被指定为读端，另一个是写端。即fd[0]存放管道读端，fd[1]存放写端。  </p>
<p>管道只能在有血缘关系的进程间使用，所以pipe()经常和fork()一起使用。  </p>
<p>实例(<a class="link"   href="https://blog.csdn.net/weixin_46211877/article/details/111816312?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1.pc_relevant_paycolumn_v3&spm=1001.2101.3001.4242.2&utm_relevant_index=3" >原文地址<i class="fas fa-external-link-alt"></i></a>):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> fd[<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">int</span> ret = pipe(fd);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">	<span class="keyword">if</span>(pid&lt;<span class="number">0</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		perror(<span class="string">&quot;fork error&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)  <span class="comment">//父进程</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">//写端</span></span><br><span class="line">		write(fd[<span class="number">1</span>], <span class="string">&quot;hello world&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;hello world&quot;</span>));	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>            <span class="comment">//子进程</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">//读端</span></span><br><span class="line">		<span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line">		<span class="built_in">memset</span>(buf, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">		<span class="keyword">int</span> n = read(fd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sleep</span><span class="params">(<span class="keyword">int</span> time)</span></span>;   <span class="comment">//休眠函数</span></span><br></pre></td></tr></table></figure>
<p>强制系统/进程挂起，time的单位在linux中为s。</p>
<h3 id="sys-eventfd-h-1"><a href="#sys-eventfd-h-1" class="headerlink" title="sys/eventfd.h"></a><strong>sys/eventfd.h</strong></h3><p>eventfd是一个轻量级的进程间通信的系统调用，eventfd通过一个进程间共享的64位计数器完成进程间通信，创建了eventfd对象后，便可以用read与write函数进行。  </p>
<p>根据上面我们在pipe函数中提到的IPC原理，可以知道，这个计数器的值其实由内核空间维护。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">eventfd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> initval, <span class="keyword">int</span> flags)</span></span>;  <span class="comment">//函数原型</span></span><br><span class="line"></span><br><span class="line">fd1 = eventfd(<span class="number">0</span>, <span class="number">0</span>);  <span class="comment">//一般情况下，初始值和flag都为0即可</span></span><br></pre></td></tr></table></figure>

<p>读写举例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fd1 = eventfd(<span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//进程1：写</span></span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="keyword">int64_t</span> event_signal = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">ret = write(fd1, &amp;event_signal, <span class="keyword">sizeof</span>(event_signal));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//进程2：读</span></span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="keyword">int64_t</span> event_signal;</span><br><span class="line"></span><br><span class="line">ret = read(fd1, &amp;event_signal, <span class="keyword">sizeof</span>(event_signal));</span><br></pre></td></tr></table></figure>


<h3 id="dirent-h"><a href="#dirent-h" class="headerlink" title="dirent.h"></a><strong>dirent.h</strong></h3><p>此部分代码参考自：<a class="link"   href="https://blog.csdn.net/dream_allday/article/details/75243818" >原文链接<i class="fas fa-external-link-alt"></i></a> </p>
<p>LINUX下历遍目录的方法一般是这样的：打开目录-&gt;读取-&gt;关闭目录<br>相关函数是：opendir -&gt; readdir -&gt; closedir</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">DIR *<span class="title">opendir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *dirname)</span></span>;</span><br><span class="line"><span class="function">struct dirent *<span class="title">readdir</span><span class="params">(DIR *dirp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">closedir</span><span class="params">(DIR *dirp)</span></span>;</span><br></pre></td></tr></table></figure>
<p>注意，在posix中有另外一种read函数的形式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readdir_r</span><span class="params">(DIR *dirp, struct dirent *entry, struct dirent **result)</span></span>;  <span class="comment">//把返回结果放到了entry中</span></span><br></pre></td></tr></table></figure>
<p>使用实例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">dp = opendir(argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (filename = readdir(dp))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;filename:%-10s\td_info:%ld\t d_reclen:%us\n&quot;</span>,</span><br><span class="line">    filename-&gt;d_name,filename-&gt;d_ino,filename-&gt;d_reclen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closedir(dp);</span><br></pre></td></tr></table></figure>


<h3 id="linux-input-h"><a href="#linux-input-h" class="headerlink" title="linux/input.h"></a><strong>linux/input.h</strong></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">input_event</span> &#123;</span></span><br><span class="line">         <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">time</span>;</span></span><br><span class="line">        __u16 type;</span><br><span class="line">        __u16 code;</span><br><span class="line">        __s32 value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="errno-h"><a href="#errno-h" class="headerlink" title="errno.h"></a><strong>errno.h</strong></h3><p>errno.h 头文件定义了整数变量 errno，它是通过系统调用设置的，在错误事件中的某些库函数表明了什么发生了错误。通常配合strerror()函数使用。<br>实例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line"></span><br><span class="line">fp = fopen(<span class="string">&quot;file.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>( fp == <span class="literal">NULL</span> ) </span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;Error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：Error: No such file or directory</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Happy Birthday Mr.Blog | 一篇博客的诞生</title>
    <url>/2022/02/05/Happy%20Birthday%20Mr.Blog/</url>
    <content><![CDATA[<h2 id="Origin-想法的开端"><a href="#Origin-想法的开端" class="headerlink" title="Origin | 想法的开端"></a>Origin | 想法的开端</h2><p>最初想要建一个博客站的想法，来源于偶然看到了小刘同志的博客（<a class="link"   href="https://lewamlyn.top/" >传送门<i class="fas fa-external-link-alt"></i></a>）。第一次知道了博客站原来可以这么花里胡哨😜，完全不同于CSDN、博客园那种耿直、硬朗、完全为功能服务的风格。于是，当时便在心中埋下了搭一个自己的博客站的想法。</p>
<h2 id="Progress-着手去做"><a href="#Progress-着手去做" class="headerlink" title="Progress | 着手去做"></a>Progress | 着手去做</h2><p>搭博客站的计划一开始定在大三的寒假，也就是2021年初，但当时因为语言考试和科研任务迟迟没有开工，没想到一拖就到了大四的寒假。由于学校申请的繁杂事务都差不多处理完了，这个本科阶段最后的寒假显得尤为清闲和珍贵，也终于有时间来倒腾倒腾博客了。  </p>
<p>跟随小刘同志的经验，我选了<a class="link"   href="https://hexo.io/zh-cn/" >Hexo<i class="fas fa-external-link-alt"></i></a>作为博客网站的框架，结合Github的个人仓库，搭建了自己的第一个网站。主要是参考了以下两篇文章，写得非常详细：</p>
<ul>
<li><a class="link"   href="https://zhuanlan.zhihu.com/p/26625249" >GitHub+Hexo 搭建个人网站详细教程<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/sinat_37781304/article/details/82729029" >hexo史上最全搭建教程<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>主题方面，经过一个选择恐惧症患者的挣扎，我选了<a class="link"   href="https://keep-docs.xpoet.cn/" >Keep<i class="fas fa-external-link-alt"></i></a>作为博客的主题。正如所见，Keep是一款简约且优雅的Hexo主题，它放弃了繁琐的配置选项，仅保留了一些能让你专注于写作的设计。Hexo的<a class="link"   href="https://hexo.io/themes/" >官网<i class="fas fa-external-link-alt"></i></a>也提供了超级多的主题可供选择。  </p>
<p>然而，仅仅循规蹈矩地采用主题提供的资源还是不能满足我👀。如果想达到更灵活的客制化，就不得不去查看主题的源码。借此机会，我也专门补习了下html、css、js的基础知识，在这方面，W3school提供了非常详细的教程，很适合新手入门：</p>
<ul>
<li><a class="link"   href="https://www.w3school.com.cn/html/index.asp" >HTML 教程<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.w3school.com.cn/css/index.asp" >CSS 教程<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://www.w3school.com.cn/js/index.asp" >JavaScript 教程<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h2 id="Story-Begins-未完待续"><a href="#Story-Begins-未完待续" class="headerlink" title="Story Begins | 未完待续"></a>Story Begins | 未完待续</h2><p>这个匆匆搭建好的博客，算是给自己一个特别的新年礼物吧。希望在不远的将来，能把陋室逐渐打造成属于自己的小世界吧。也希望在即将到来的研究生阶段，自己能坚持往小世界里填充自己的东西吧。  </p>
<p>最后，附上自己很喜欢的一句话❤️：  </p>
<p><strong>“君子深造之以道，欲其自得之也。自得之，则居之安；居之安，则资之深；资之深，则取之左右逢其原。故君子往其自得之也。”</strong>    </p>
<p>不祝人如意，只望君能自得。</p>
]]></content>
      <categories>
        <category>随记</category>
      </categories>
      <tags>
        <tag>随记</tag>
      </tags>
  </entry>
</search>
